// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rulerscheduler.proto

package rulerqueryscheduler

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/cortexproject/cortex/pkg/cortexpb"
	github_com_cortexproject_cortex_pkg_cortexpb "github.com/cortexproject/cortex/pkg/cortexpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PromQLInstantQueryRequest struct {
	Qs string    `protobuf:"bytes,1,opt,name=qs,proto3" json:"qs,omitempty"`
	Ts time.Time `protobuf:"bytes,6,opt,name=ts,proto3,stdtime" json:"ts"`
}

func (m *PromQLInstantQueryRequest) Reset()      { *m = PromQLInstantQueryRequest{} }
func (*PromQLInstantQueryRequest) ProtoMessage() {}
func (*PromQLInstantQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{0}
}
func (m *PromQLInstantQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromQLInstantQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromQLInstantQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromQLInstantQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromQLInstantQueryRequest.Merge(m, src)
}
func (m *PromQLInstantQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *PromQLInstantQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PromQLInstantQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PromQLInstantQueryRequest proto.InternalMessageInfo

func (m *PromQLInstantQueryRequest) GetQs() string {
	if m != nil {
		return m.Qs
	}
	return ""
}

func (m *PromQLInstantQueryRequest) GetTs() time.Time {
	if m != nil {
		return m.Ts
	}
	return time.Time{}
}

type PromQLInstantQueryResult struct {
	Vector []SampleAdapter `protobuf:"bytes,1,rep,name=vector,proto3,customtype=SampleAdapter" json:"vector"`
}

func (m *PromQLInstantQueryResult) Reset()      { *m = PromQLInstantQueryResult{} }
func (*PromQLInstantQueryResult) ProtoMessage() {}
func (*PromQLInstantQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{1}
}
func (m *PromQLInstantQueryResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromQLInstantQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromQLInstantQueryResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromQLInstantQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromQLInstantQueryResult.Merge(m, src)
}
func (m *PromQLInstantQueryResult) XXX_Size() int {
	return m.Size()
}
func (m *PromQLInstantQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PromQLInstantQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_PromQLInstantQueryResult proto.InternalMessageInfo

type Sample struct {
	T      int64                                                       `protobuf:"varint,1,opt,name=T,proto3" json:"T,omitempty"`
	F      float64                                                     `protobuf:"fixed64,2,opt,name=F,proto3" json:"F,omitempty"`
	Metric []github_com_cortexproject_cortex_pkg_cortexpb.LabelAdapter `protobuf:"bytes,4,rep,name=metric,proto3,customtype=github.com/cortexproject/cortex/pkg/cortexpb.LabelAdapter" json:"metric"`
}

func (m *Sample) Reset()      { *m = Sample{} }
func (*Sample) ProtoMessage() {}
func (*Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{2}
}
func (m *Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sample.Merge(m, src)
}
func (m *Sample) XXX_Size() int {
	return m.Size()
}
func (m *Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_Sample proto.InternalMessageInfo

func (m *Sample) GetT() int64 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *Sample) GetF() float64 {
	if m != nil {
		return m.F
	}
	return 0
}

func init() {
	proto.RegisterType((*PromQLInstantQueryRequest)(nil), "rulerqueryscheduler.PromQLInstantQueryRequest")
	proto.RegisterType((*PromQLInstantQueryResult)(nil), "rulerqueryscheduler.PromQLInstantQueryResult")
	proto.RegisterType((*Sample)(nil), "rulerqueryscheduler.Sample")
}

func init() { proto.RegisterFile("rulerscheduler.proto", fileDescriptor_35c1e93bc0877357) }

var fileDescriptor_35c1e93bc0877357 = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xbd, 0x6e, 0x13, 0x41,
	0x10, 0xde, 0xb9, 0xc0, 0x09, 0x36, 0x90, 0x62, 0x13, 0xa4, 0xc3, 0x48, 0x6b, 0xcb, 0x95, 0x1b,
	0xf6, 0x24, 0x93, 0x86, 0x32, 0x2e, 0x22, 0x81, 0x52, 0x24, 0x17, 0xbf, 0xc0, 0xde, 0x79, 0x73,
	0x3e, 0xb8, 0xf3, 0x9e, 0x77, 0xe7, 0x10, 0x50, 0xf1, 0x08, 0x29, 0x78, 0x08, 0x1e, 0x25, 0xa5,
	0xcb, 0x88, 0x22, 0xe0, 0x73, 0x43, 0x99, 0x47, 0x40, 0xf7, 0xe7, 0x02, 0x19, 0x09, 0xba, 0xf9,
	0xf6, 0x9b, 0x9d, 0xef, 0x9b, 0x6f, 0xe8, 0x91, 0x29, 0x52, 0x65, 0x6c, 0x34, 0x57, 0xb3, 0xaa,
	0x10, 0xb9, 0xd1, 0xa8, 0xd9, 0x61, 0xfd, 0xba, 0x2c, 0x94, 0xf9, 0xb4, 0xa5, 0x7a, 0x47, 0xb1,
	0x8e, 0x75, 0xcd, 0xfb, 0x55, 0xd5, 0xb4, 0xf6, 0x78, 0xac, 0x75, 0x9c, 0x2a, 0xbf, 0x46, 0x61,
	0x71, 0xe5, 0xcf, 0x0a, 0x23, 0x31, 0xd1, 0x8b, 0x96, 0xef, 0xff, 0xc9, 0x63, 0x92, 0x29, 0x8b,
	0x32, 0xcb, 0xdb, 0x86, 0xd7, 0x71, 0x82, 0xf3, 0x22, 0x14, 0x91, 0xce, 0xfc, 0x48, 0x1b, 0x54,
	0x1f, 0x73, 0xa3, 0xdf, 0xa9, 0x08, 0x5b, 0xe4, 0xe7, 0xef, 0xe3, 0x8e, 0x08, 0xdb, 0xa2, 0xf9,
	0x3a, 0x94, 0xf4, 0xf9, 0xb9, 0xd1, 0xd9, 0xc5, 0xd9, 0x9b, 0x85, 0x45, 0xb9, 0xc0, 0x8b, 0xca,
	0x70, 0xa0, 0x96, 0x85, 0xb2, 0xc8, 0x0e, 0xa8, 0xb3, 0xb4, 0x1e, 0x0c, 0x60, 0xf4, 0x38, 0x70,
	0x96, 0x96, 0x1d, 0x53, 0x07, 0xad, 0xe7, 0x0e, 0x60, 0xb4, 0x3f, 0xee, 0x89, 0xc6, 0x95, 0xe8,
	0x5c, 0x89, 0x69, 0xe7, 0x6a, 0xf2, 0xe8, 0xe6, 0xae, 0x4f, 0xae, 0x7f, 0xf4, 0x21, 0x70, 0xd0,
	0x0e, 0xaf, 0xa8, 0xb7, 0x4b, 0xc2, 0x16, 0x29, 0xb2, 0xb7, 0xd4, 0xfd, 0xa0, 0x22, 0xd4, 0xc6,
	0x83, 0xc1, 0xde, 0x68, 0x7f, 0xfc, 0x42, 0xec, 0x88, 0x4d, 0x5c, 0xca, 0x2c, 0x4f, 0xd5, 0xe4,
	0x59, 0x35, 0xf6, 0xfb, 0x5d, 0xff, 0x69, 0x83, 0x4f, 0x66, 0x32, 0x47, 0x65, 0x82, 0x76, 0xc2,
	0xf0, 0x2b, 0x50, 0xb7, 0x61, 0xd8, 0x13, 0x0a, 0xd3, 0xda, 0xf7, 0x5e, 0x00, 0xd3, 0x0a, 0x9d,
	0x7a, 0xce, 0x00, 0x46, 0x10, 0xc0, 0x29, 0x5b, 0x50, 0x37, 0x53, 0x68, 0x92, 0xc8, 0x7b, 0x50,
	0x4b, 0x1e, 0x8a, 0x2e, 0x19, 0x71, 0x26, 0x43, 0x95, 0x9e, 0xcb, 0xc4, 0x4c, 0x4e, 0x5a, 0xa9,
	0xff, 0x4a, 0xb6, 0xf9, 0xbf, 0xb5, 0xd5, 0xa8, 0x8c, 0x3f, 0xd3, 0x83, 0xa0, 0xda, 0xe2, 0xb2,
	0x5b, 0x87, 0xcd, 0xe9, 0xc3, 0x3a, 0x03, 0x26, 0x76, 0x6e, 0xfb, 0xd7, 0x7b, 0xf4, 0x5e, 0xfe,
	0x73, 0x7f, 0x15, 0xee, 0x90, 0x4c, 0x8e, 0x57, 0x6b, 0x4e, 0x6e, 0xd7, 0x9c, 0xdc, 0xaf, 0x39,
	0x7c, 0x29, 0x39, 0x7c, 0x2b, 0x39, 0xdc, 0x94, 0x1c, 0x56, 0x25, 0x87, 0x9f, 0x25, 0x87, 0x5f,
	0x25, 0x27, 0xf7, 0x25, 0x87, 0xeb, 0x0d, 0x27, 0xab, 0x0d, 0x27, 0xb7, 0x1b, 0x4e, 0x42, 0xb7,
	0x3e, 0xe9, 0xab, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0x03, 0xbf, 0x40, 0xd9, 0x02, 0x00,
	0x00,
}

func (this *PromQLInstantQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromQLInstantQueryRequest)
	if !ok {
		that2, ok := that.(PromQLInstantQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Qs != that1.Qs {
		return false
	}
	if !this.Ts.Equal(that1.Ts) {
		return false
	}
	return true
}
func (this *PromQLInstantQueryResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PromQLInstantQueryResult)
	if !ok {
		that2, ok := that.(PromQLInstantQueryResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Vector) != len(that1.Vector) {
		return false
	}
	for i := range this.Vector {
		if !this.Vector[i].Equal(that1.Vector[i]) {
			return false
		}
	}
	return true
}
func (this *Sample) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sample)
	if !ok {
		that2, ok := that.(Sample)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.T != that1.T {
		return false
	}
	if this.F != that1.F {
		return false
	}
	if len(this.Metric) != len(that1.Metric) {
		return false
	}
	for i := range this.Metric {
		if !this.Metric[i].Equal(that1.Metric[i]) {
			return false
		}
	}
	return true
}
func (this *PromQLInstantQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rulerqueryscheduler.PromQLInstantQueryRequest{")
	s = append(s, "Qs: "+fmt.Sprintf("%#v", this.Qs)+",\n")
	s = append(s, "Ts: "+fmt.Sprintf("%#v", this.Ts)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PromQLInstantQueryResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rulerqueryscheduler.PromQLInstantQueryResult{")
	s = append(s, "Vector: "+fmt.Sprintf("%#v", this.Vector)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Sample) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rulerqueryscheduler.Sample{")
	s = append(s, "T: "+fmt.Sprintf("%#v", this.T)+",\n")
	s = append(s, "F: "+fmt.Sprintf("%#v", this.F)+",\n")
	s = append(s, "Metric: "+fmt.Sprintf("%#v", this.Metric)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRulerscheduler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RulerSchedulerClient is the client API for RulerScheduler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RulerSchedulerClient interface {
	Query(ctx context.Context, in *PromQLInstantQueryRequest, opts ...grpc.CallOption) (*PromQLInstantQueryResult, error)
}

type rulerSchedulerClient struct {
	cc *grpc.ClientConn
}

func NewRulerSchedulerClient(cc *grpc.ClientConn) RulerSchedulerClient {
	return &rulerSchedulerClient{cc}
}

func (c *rulerSchedulerClient) Query(ctx context.Context, in *PromQLInstantQueryRequest, opts ...grpc.CallOption) (*PromQLInstantQueryResult, error) {
	out := new(PromQLInstantQueryResult)
	err := c.cc.Invoke(ctx, "/rulerqueryscheduler.RulerScheduler/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RulerSchedulerServer is the server API for RulerScheduler service.
type RulerSchedulerServer interface {
	Query(context.Context, *PromQLInstantQueryRequest) (*PromQLInstantQueryResult, error)
}

// UnimplementedRulerSchedulerServer can be embedded to have forward compatible implementations.
type UnimplementedRulerSchedulerServer struct {
}

func (*UnimplementedRulerSchedulerServer) Query(ctx context.Context, req *PromQLInstantQueryRequest) (*PromQLInstantQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func RegisterRulerSchedulerServer(s *grpc.Server, srv RulerSchedulerServer) {
	s.RegisterService(&_RulerScheduler_serviceDesc, srv)
}

func _RulerScheduler_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromQLInstantQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RulerSchedulerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rulerqueryscheduler.RulerScheduler/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RulerSchedulerServer).Query(ctx, req.(*PromQLInstantQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RulerScheduler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rulerqueryscheduler.RulerScheduler",
	HandlerType: (*RulerSchedulerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _RulerScheduler_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rulerscheduler.proto",
}

func (m *PromQLInstantQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromQLInstantQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromQLInstantQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Ts, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Ts):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRulerscheduler(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.Qs) > 0 {
		i -= len(m.Qs)
		copy(dAtA[i:], m.Qs)
		i = encodeVarintRulerscheduler(dAtA, i, uint64(len(m.Qs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PromQLInstantQueryResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromQLInstantQueryResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PromQLInstantQueryResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for iNdEx := len(m.Vector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Vector[iNdEx].Size()
				i -= size
				if _, err := m.Vector[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintRulerscheduler(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metric) > 0 {
		for iNdEx := len(m.Metric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Metric[iNdEx].Size()
				i -= size
				if _, err := m.Metric[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintRulerscheduler(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.F != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.F))))
		i--
		dAtA[i] = 0x11
	}
	if m.T != 0 {
		i = encodeVarintRulerscheduler(dAtA, i, uint64(m.T))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRulerscheduler(dAtA []byte, offset int, v uint64) int {
	offset -= sovRulerscheduler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PromQLInstantQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Qs)
	if l > 0 {
		n += 1 + l + sovRulerscheduler(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Ts)
	n += 1 + l + sovRulerscheduler(uint64(l))
	return n
}

func (m *PromQLInstantQueryResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vector) > 0 {
		for _, e := range m.Vector {
			l = e.Size()
			n += 1 + l + sovRulerscheduler(uint64(l))
		}
	}
	return n
}

func (m *Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.T != 0 {
		n += 1 + sovRulerscheduler(uint64(m.T))
	}
	if m.F != 0 {
		n += 9
	}
	if len(m.Metric) > 0 {
		for _, e := range m.Metric {
			l = e.Size()
			n += 1 + l + sovRulerscheduler(uint64(l))
		}
	}
	return n
}

func sovRulerscheduler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRulerscheduler(x uint64) (n int) {
	return sovRulerscheduler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PromQLInstantQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromQLInstantQueryRequest{`,
		`Qs:` + fmt.Sprintf("%v", this.Qs) + `,`,
		`Ts:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Ts), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PromQLInstantQueryResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromQLInstantQueryResult{`,
		`Vector:` + fmt.Sprintf("%v", this.Vector) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Sample) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sample{`,
		`T:` + fmt.Sprintf("%v", this.T) + `,`,
		`F:` + fmt.Sprintf("%v", this.F) + `,`,
		`Metric:` + fmt.Sprintf("%v", this.Metric) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRulerscheduler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PromQLInstantQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromQLInstantQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromQLInstantQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Ts, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRulerscheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromQLInstantQueryResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromQLInstantQueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromQLInstantQueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vector = append(m.Vector, SampleAdapter{})
			if err := m.Vector[len(m.Vector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRulerscheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field F", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.F = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = append(m.Metric, github_com_cortexproject_cortex_pkg_cortexpb.LabelAdapter{})
			if err := m.Metric[len(m.Metric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRulerscheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRulerscheduler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRulerscheduler
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRulerscheduler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRulerscheduler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRulerscheduler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRulerscheduler
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRulerscheduler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRulerscheduler   = fmt.Errorf("proto: integer overflow")
)
