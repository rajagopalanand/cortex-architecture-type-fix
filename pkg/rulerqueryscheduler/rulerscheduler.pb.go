// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rulerscheduler.proto

package rulerqueryscheduler

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RulerToSchedulerType int32

const (
	INIT    RulerToSchedulerType = 0
	ENQUEUE RulerToSchedulerType = 1
	CANCEL  RulerToSchedulerType = 2
)

var RulerToSchedulerType_name = map[int32]string{
	0: "INIT",
	1: "ENQUEUE",
	2: "CANCEL",
}

var RulerToSchedulerType_value = map[string]int32{
	"INIT":    0,
	"ENQUEUE": 1,
	"CANCEL":  2,
}

func (RulerToSchedulerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{0}
}

type ScheduleEvaluationResponseStatus int32

const (
	OK                           ScheduleEvaluationResponseStatus = 0
	TOO_MANY_REQUESTS_PER_TENANT ScheduleEvaluationResponseStatus = 1
	ERROR                        ScheduleEvaluationResponseStatus = 2
	SHUTTING_DOWN                ScheduleEvaluationResponseStatus = 3
)

var ScheduleEvaluationResponseStatus_name = map[int32]string{
	0: "OK",
	1: "TOO_MANY_REQUESTS_PER_TENANT",
	2: "ERROR",
	3: "SHUTTING_DOWN",
}

var ScheduleEvaluationResponseStatus_value = map[string]int32{
	"OK":                           0,
	"TOO_MANY_REQUESTS_PER_TENANT": 1,
	"ERROR":                        2,
	"SHUTTING_DOWN":                3,
}

func (ScheduleEvaluationResponseStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{1}
}

type ScheduleEvaluationRequest struct {
	Type          RulerToSchedulerType `protobuf:"varint,1,opt,name=type,proto3,enum=rulerqueryscheduler.RulerToSchedulerType" json:"type,omitempty"`
	UserID        string               `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Namespace     string               `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	RuleGroup     string               `protobuf:"bytes,4,opt,name=ruleGroup,proto3" json:"ruleGroup,omitempty"`
	EvalTimestamp time.Time            `protobuf:"bytes,5,opt,name=evalTimestamp,proto3,stdtime" json:"evalTimestamp"`
}

func (m *ScheduleEvaluationRequest) Reset()      { *m = ScheduleEvaluationRequest{} }
func (*ScheduleEvaluationRequest) ProtoMessage() {}
func (*ScheduleEvaluationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{0}
}
func (m *ScheduleEvaluationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleEvaluationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleEvaluationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleEvaluationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleEvaluationRequest.Merge(m, src)
}
func (m *ScheduleEvaluationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleEvaluationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleEvaluationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleEvaluationRequest proto.InternalMessageInfo

func (m *ScheduleEvaluationRequest) GetType() RulerToSchedulerType {
	if m != nil {
		return m.Type
	}
	return INIT
}

func (m *ScheduleEvaluationRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ScheduleEvaluationRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ScheduleEvaluationRequest) GetRuleGroup() string {
	if m != nil {
		return m.RuleGroup
	}
	return ""
}

func (m *ScheduleEvaluationRequest) GetEvalTimestamp() time.Time {
	if m != nil {
		return m.EvalTimestamp
	}
	return time.Time{}
}

type ScheduleEvaluationResponse struct {
	Status ScheduleEvaluationResponseStatus `protobuf:"varint,1,opt,name=status,proto3,enum=rulerqueryscheduler.ScheduleEvaluationResponseStatus" json:"status,omitempty"`
	Error  string                           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ScheduleEvaluationResponse) Reset()      { *m = ScheduleEvaluationResponse{} }
func (*ScheduleEvaluationResponse) ProtoMessage() {}
func (*ScheduleEvaluationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_35c1e93bc0877357, []int{1}
}
func (m *ScheduleEvaluationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScheduleEvaluationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScheduleEvaluationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScheduleEvaluationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleEvaluationResponse.Merge(m, src)
}
func (m *ScheduleEvaluationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ScheduleEvaluationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleEvaluationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleEvaluationResponse proto.InternalMessageInfo

func (m *ScheduleEvaluationResponse) GetStatus() ScheduleEvaluationResponseStatus {
	if m != nil {
		return m.Status
	}
	return OK
}

func (m *ScheduleEvaluationResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("rulerqueryscheduler.RulerToSchedulerType", RulerToSchedulerType_name, RulerToSchedulerType_value)
	proto.RegisterEnum("rulerqueryscheduler.ScheduleEvaluationResponseStatus", ScheduleEvaluationResponseStatus_name, ScheduleEvaluationResponseStatus_value)
	proto.RegisterType((*ScheduleEvaluationRequest)(nil), "rulerqueryscheduler.ScheduleEvaluationRequest")
	proto.RegisterType((*ScheduleEvaluationResponse)(nil), "rulerqueryscheduler.ScheduleEvaluationResponse")
}

func init() { proto.RegisterFile("rulerscheduler.proto", fileDescriptor_35c1e93bc0877357) }

var fileDescriptor_35c1e93bc0877357 = []byte{
	// 513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x6f, 0x12, 0x4f,
	0x14, 0xde, 0xa1, 0x40, 0xcb, 0x6b, 0xfa, 0xcb, 0x76, 0x7e, 0xc4, 0x20, 0x69, 0x06, 0xc2, 0x09,
	0x7b, 0x58, 0x0c, 0xea, 0xc1, 0x83, 0x07, 0xda, 0x8e, 0x15, 0xb5, 0x8b, 0x1d, 0x86, 0x18, 0x4f,
	0x64, 0xdb, 0x8e, 0x58, 0x03, 0xcc, 0x32, 0xbb, 0xd3, 0x84, 0x9b, 0x1e, 0xbc, 0xf7, 0xcf, 0xf0,
	0x4f, 0xe9, 0x91, 0x63, 0x4f, 0x2a, 0xcb, 0xc5, 0x63, 0xcf, 0x9e, 0x0c, 0xb3, 0x0b, 0x46, 0x83,
	0x51, 0x2f, 0x93, 0x79, 0xef, 0x7b, 0xdf, 0x7b, 0xef, 0xfb, 0xf2, 0x20, 0xaf, 0x74, 0x5f, 0xa8,
	0xe0, 0xf4, 0x8d, 0x38, 0x9b, 0x7f, 0x1c, 0x5f, 0xc9, 0x50, 0xe2, 0xff, 0x4d, 0x76, 0xa4, 0x85,
	0x1a, 0x2f, 0xa1, 0x62, 0xbe, 0x27, 0x7b, 0xd2, 0xe0, 0xb5, 0xf9, 0x2f, 0x2e, 0x2d, 0x92, 0x9e,
	0x94, 0xbd, 0xbe, 0xa8, 0x99, 0xe8, 0x44, 0xbf, 0xae, 0x9d, 0x69, 0xe5, 0x85, 0xe7, 0x72, 0x98,
	0xe0, 0xa5, 0x5f, 0xf1, 0xf0, 0x7c, 0x20, 0x82, 0xd0, 0x1b, 0xf8, 0x71, 0x41, 0xe5, 0x1b, 0x82,
	0xdb, 0xed, 0x64, 0x08, 0xbd, 0xf0, 0xfa, 0xda, 0xb0, 0x99, 0x18, 0x69, 0x11, 0x84, 0xf8, 0x11,
	0xa4, 0xc3, 0xb1, 0x2f, 0x0a, 0xa8, 0x8c, 0xaa, 0xff, 0xd5, 0xef, 0x38, 0x2b, 0x16, 0x73, 0xd8,
	0xfc, 0xe5, 0x72, 0xd1, 0x44, 0xf1, 0xb1, 0x2f, 0x98, 0xa1, 0xe1, 0x5b, 0x90, 0xd5, 0x81, 0x50,
	0xcd, 0x83, 0x42, 0xaa, 0x8c, 0xaa, 0x39, 0x96, 0x44, 0x78, 0x07, 0x72, 0x43, 0x6f, 0x20, 0x02,
	0xdf, 0x3b, 0x15, 0x85, 0x35, 0x03, 0xfd, 0x48, 0xcc, 0xd1, 0xf9, 0x9c, 0x43, 0x25, 0xb5, 0x5f,
	0x48, 0xc7, 0xe8, 0x32, 0x81, 0x9f, 0xc2, 0x96, 0xb8, 0xf0, 0xfa, 0x7c, 0xa1, 0xa3, 0x90, 0x29,
	0xa3, 0xea, 0x66, 0xbd, 0xe8, 0xc4, 0x4a, 0x9d, 0x85, 0x52, 0x67, 0x59, 0xb1, 0xb7, 0x71, 0xf5,
	0xa9, 0x64, 0x5d, 0x7e, 0x2e, 0x21, 0xf6, 0x33, 0xb5, 0xf2, 0x1e, 0x41, 0x71, 0x95, 0xf8, 0xc0,
	0x97, 0xc3, 0x40, 0xe0, 0x23, 0xc8, 0x06, 0xa1, 0x17, 0xea, 0x20, 0xd1, 0xff, 0x60, 0xa5, 0xfe,
	0xdf, 0x37, 0x68, 0x1b, 0x32, 0x4b, 0x9a, 0xe0, 0x3c, 0x64, 0x84, 0x52, 0x52, 0x25, 0x66, 0xc4,
	0xc1, 0xee, 0x43, 0xc8, 0xaf, 0x72, 0x10, 0x6f, 0x40, 0xba, 0xe9, 0x36, 0xb9, 0x6d, 0xe1, 0x4d,
	0x58, 0xa7, 0xee, 0x71, 0x87, 0x76, 0xa8, 0x8d, 0x30, 0x40, 0x76, 0xbf, 0xe1, 0xee, 0xd3, 0xe7,
	0x76, 0x6a, 0xf7, 0x2d, 0x94, 0xff, 0x34, 0x1c, 0x67, 0x21, 0xd5, 0x7a, 0x66, 0x5b, 0xb8, 0x0c,
	0x3b, 0xbc, 0xd5, 0xea, 0x1e, 0x35, 0xdc, 0x57, 0x5d, 0x46, 0x8f, 0x3b, 0xb4, 0xcd, 0xdb, 0xdd,
	0x17, 0x94, 0x75, 0x39, 0x75, 0x1b, 0x2e, 0xb7, 0x11, 0xce, 0x41, 0x86, 0x32, 0xd6, 0x62, 0x76,
	0x0a, 0x6f, 0xc3, 0x56, 0xfb, 0x49, 0x87, 0xf3, 0xa6, 0x7b, 0xd8, 0x3d, 0x68, 0xbd, 0x74, 0xed,
	0xb5, 0xfa, 0x07, 0x04, 0xdb, 0xcb, 0x05, 0x1f, 0x4b, 0x65, 0x76, 0xc6, 0x3e, 0xac, 0xd3, 0xe1,
	0x48, 0x0b, 0x2d, 0xb0, 0xf3, 0xd7, 0xe6, 0x98, 0xd3, 0x2a, 0xd6, 0xfe, 0xd1, 0xcc, 0x8a, 0x55,
	0x45, 0x77, 0xd1, 0xde, 0xfd, 0xc9, 0x94, 0x58, 0xd7, 0x53, 0x62, 0xdd, 0x4c, 0x09, 0x7a, 0x17,
	0x11, 0xf4, 0x31, 0x22, 0xe8, 0x2a, 0x22, 0x68, 0x12, 0x11, 0xf4, 0x25, 0x22, 0xe8, 0x6b, 0x44,
	0xac, 0x9b, 0x88, 0xa0, 0xcb, 0x19, 0xb1, 0x26, 0x33, 0x62, 0x5d, 0xcf, 0x88, 0x75, 0x92, 0x35,
	0x57, 0x71, 0xef, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc7, 0xf5, 0x94, 0x70, 0x03, 0x00,
	0x00,
}

func (x RulerToSchedulerType) String() string {
	s, ok := RulerToSchedulerType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ScheduleEvaluationResponseStatus) String() string {
	s, ok := ScheduleEvaluationResponseStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ScheduleEvaluationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleEvaluationRequest)
	if !ok {
		that2, ok := that.(ScheduleEvaluationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.UserID != that1.UserID {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.RuleGroup != that1.RuleGroup {
		return false
	}
	if !this.EvalTimestamp.Equal(that1.EvalTimestamp) {
		return false
	}
	return true
}
func (this *ScheduleEvaluationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ScheduleEvaluationResponse)
	if !ok {
		that2, ok := that.(ScheduleEvaluationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *ScheduleEvaluationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&rulerqueryscheduler.ScheduleEvaluationRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "UserID: "+fmt.Sprintf("%#v", this.UserID)+",\n")
	s = append(s, "Namespace: "+fmt.Sprintf("%#v", this.Namespace)+",\n")
	s = append(s, "RuleGroup: "+fmt.Sprintf("%#v", this.RuleGroup)+",\n")
	s = append(s, "EvalTimestamp: "+fmt.Sprintf("%#v", this.EvalTimestamp)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ScheduleEvaluationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&rulerqueryscheduler.ScheduleEvaluationResponse{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRulerscheduler(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchedulerForRulerClient is the client API for SchedulerForRuler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchedulerForRulerClient interface {
	Enqueue(ctx context.Context, opts ...grpc.CallOption) (SchedulerForRuler_EnqueueClient, error)
}

type schedulerForRulerClient struct {
	cc *grpc.ClientConn
}

func NewSchedulerForRulerClient(cc *grpc.ClientConn) SchedulerForRulerClient {
	return &schedulerForRulerClient{cc}
}

func (c *schedulerForRulerClient) Enqueue(ctx context.Context, opts ...grpc.CallOption) (SchedulerForRuler_EnqueueClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SchedulerForRuler_serviceDesc.Streams[0], "/rulerqueryscheduler.SchedulerForRuler/Enqueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &schedulerForRulerEnqueueClient{stream}
	return x, nil
}

type SchedulerForRuler_EnqueueClient interface {
	Send(*ScheduleEvaluationRequest) error
	Recv() (*ScheduleEvaluationResponse, error)
	grpc.ClientStream
}

type schedulerForRulerEnqueueClient struct {
	grpc.ClientStream
}

func (x *schedulerForRulerEnqueueClient) Send(m *ScheduleEvaluationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *schedulerForRulerEnqueueClient) Recv() (*ScheduleEvaluationResponse, error) {
	m := new(ScheduleEvaluationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SchedulerForRulerServer is the server API for SchedulerForRuler service.
type SchedulerForRulerServer interface {
	Enqueue(SchedulerForRuler_EnqueueServer) error
}

// UnimplementedSchedulerForRulerServer can be embedded to have forward compatible implementations.
type UnimplementedSchedulerForRulerServer struct {
}

func (*UnimplementedSchedulerForRulerServer) Enqueue(srv SchedulerForRuler_EnqueueServer) error {
	return status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}

func RegisterSchedulerForRulerServer(s *grpc.Server, srv SchedulerForRulerServer) {
	s.RegisterService(&_SchedulerForRuler_serviceDesc, srv)
}

func _SchedulerForRuler_Enqueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SchedulerForRulerServer).Enqueue(&schedulerForRulerEnqueueServer{stream})
}

type SchedulerForRuler_EnqueueServer interface {
	Send(*ScheduleEvaluationResponse) error
	Recv() (*ScheduleEvaluationRequest, error)
	grpc.ServerStream
}

type schedulerForRulerEnqueueServer struct {
	grpc.ServerStream
}

func (x *schedulerForRulerEnqueueServer) Send(m *ScheduleEvaluationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *schedulerForRulerEnqueueServer) Recv() (*ScheduleEvaluationRequest, error) {
	m := new(ScheduleEvaluationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SchedulerForRuler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rulerqueryscheduler.SchedulerForRuler",
	HandlerType: (*SchedulerForRulerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Enqueue",
			Handler:       _SchedulerForRuler_Enqueue_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rulerscheduler.proto",
}

func (m *ScheduleEvaluationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleEvaluationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleEvaluationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EvalTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EvalTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintRulerscheduler(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	if len(m.RuleGroup) > 0 {
		i -= len(m.RuleGroup)
		copy(dAtA[i:], m.RuleGroup)
		i = encodeVarintRulerscheduler(dAtA, i, uint64(len(m.RuleGroup)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRulerscheduler(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserID) > 0 {
		i -= len(m.UserID)
		copy(dAtA[i:], m.UserID)
		i = encodeVarintRulerscheduler(dAtA, i, uint64(len(m.UserID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintRulerscheduler(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ScheduleEvaluationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScheduleEvaluationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScheduleEvaluationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRulerscheduler(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintRulerscheduler(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRulerscheduler(dAtA []byte, offset int, v uint64) int {
	offset -= sovRulerscheduler(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ScheduleEvaluationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRulerscheduler(uint64(m.Type))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovRulerscheduler(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRulerscheduler(uint64(l))
	}
	l = len(m.RuleGroup)
	if l > 0 {
		n += 1 + l + sovRulerscheduler(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EvalTimestamp)
	n += 1 + l + sovRulerscheduler(uint64(l))
	return n
}

func (m *ScheduleEvaluationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRulerscheduler(uint64(m.Status))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRulerscheduler(uint64(l))
	}
	return n
}

func sovRulerscheduler(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRulerscheduler(x uint64) (n int) {
	return sovRulerscheduler(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ScheduleEvaluationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduleEvaluationRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`UserID:` + fmt.Sprintf("%v", this.UserID) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`RuleGroup:` + fmt.Sprintf("%v", this.RuleGroup) + `,`,
		`EvalTimestamp:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.EvalTimestamp), "Timestamp", "timestamp.Timestamp", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ScheduleEvaluationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ScheduleEvaluationResponse{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRulerscheduler(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ScheduleEvaluationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleEvaluationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleEvaluationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RulerToSchedulerType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvalTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EvalTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRulerscheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScheduleEvaluationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScheduleEvaluationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScheduleEvaluationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ScheduleEvaluationResponseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRulerscheduler(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRulerscheduler
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRulerscheduler(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRulerscheduler
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRulerscheduler
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRulerscheduler
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRulerscheduler
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRulerscheduler
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRulerscheduler(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRulerscheduler
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRulerscheduler = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRulerscheduler   = fmt.Errorf("proto: integer overflow")
)
